---
AWSTemplateFormatVersion: '2010-09-09'
Description: SupportCase Module Data Collection Setup

Parameters:
  DataCollectionAccountID:
    Type: String
    Description: AccountId of where the collector is deployed
  DataCollectionRegion:
    Type: String
    Description: Account Region of where the collector is deployed
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of resources created where required. Note you may wish to add a dash at the end to make more readable
    Default: "Heidi-"
  MultiAccountRoleName:
    Type: String
    Description: Name of the IAM role deployed in all Link accounts which can retrieve AWS Data. Prefix will be added to it.
    Default: "MultiAccountRole"
  ModuleName:
    Type: String
    Description: Name of the module to build role name.
    Default: "Cases"
  IsDataCollectionSetup:
    Type: String
    Default: "no"
    Description: This is to toggle if we need to deploy lambda or no. Lambda must be deloyed in DataCollection Account Only.
    AllowedValues:
      - "yes"
      - "no"  
      
Conditions:
  IsDataCollectionSetup: !Equals [!Ref IsDataCollectionSetup, "yes"]
    
Resources:
  DataCollectionRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "CasesPutEvent-${AWS::AccountId}-${AWS::Region}-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "events:PutEvents"
                Resource: 
                  - !Sub "arn:${AWS::Partition}:events:${DataCollectionRegion}:${DataCollectionAccountID}:event-bus/${ResourcePrefix}DataCollectionBus-${DataCollectionAccountID}"

  DefaultBusRuleCases:
    DependsOn: SendEventToDataCollectionAccount
    Type: "AWS::Events::Rule"
    Properties:
      Description: "EventBridge default rule for aws.support events"
      EventBusName: "default"
      EventPattern:
        source:
          - "aws.support"
          - "heidi.support"
      Targets:
        - Arn: !Sub "arn:${AWS::Partition}:events:${DataCollectionRegion}:${DataCollectionAccountID}:event-bus/${ResourcePrefix}DataCollectionBus-${DataCollectionAccountID}"
          Id: DataCollectionRuleOnDefaultBus
          RoleArn: !GetAtt DataCollectionRuleRole.Arn

#send event(e.g. stack create complete) to Data Collection Account so that it can trigger backfill lambda
  SendEventToDataCollectionAccount:
    DependsOn: WaitConditionForBackfillStack
    Type: "AWS::Events::Rule"
    Properties:
      Description: "EventBridge to send data to collection account"
      EventBusName: "default"
      EventPattern:
        source:
          - "aws.cloudformation"
        detail:
          logical-resource-id:
            - DefaultBusRuleCases
          status-details:
            status:
              - CREATE_COMPLETE
      Targets:
        - Arn: !Sub "arn:${AWS::Partition}:events:${DataCollectionRegion}:${DataCollectionAccountID}:event-bus/${ResourcePrefix}DataCollectionBus-${DataCollectionAccountID}"
          Id: CallHomeRuleOnDefaultBus
          RoleArn: !GetAtt  DataCollectionRuleRole.Arn

#Sending event to DataCollection account so that backfill lambda can be triggered.
  WaitConditionForBackfillStack:
    Type: AWS::CloudFormation::WaitConditionHandle
    Metadata:
      MetadataForBackfillStack: !If
        - IsDataCollectionSetup
        - !Ref EventToTriggerBackfillLambda
        - ""

#This is Case Enrich Lambda Role which will be assumed by lambda in Data Collection Account.
  CasesEnrichAssumeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${ModuleName}-${MultiAccountRoleName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${DataCollectionAccountID}:root"
            Condition:
              ForAnyValue:ArnEquals:
                aws:PrincipalArn:
                  - !Sub "arn:${AWS::Partition}:iam::${DataCollectionAccountID}:role/${ResourcePrefix}${ModuleName}-LambdaRole"
      Path: /
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Role must have an explicit RoleName for traceability"
  CaseSupportPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CaseSupportPolicy
      PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "support:DescribeCases"
                - "support:DescribeCommunications"
              Resource: "*"
            - Effect: Allow
              Action:
                - "events:PutEvents"
              Resource: !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
      Roles:
        - Ref: CasesEnrichAssumeLambdaRole
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: "Policy is used for scanning of a wide range of resources"

#This is Case Enrich Lambda Role which will assume above lambda in Data Collection Account.
  CasesEnrichLambdaRole:
    Condition: IsDataCollectionSetup
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${ModuleName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: "AssumeMultiAccountRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${ResourcePrefix}${ModuleName}-${MultiAccountRoleName}"

# Enrich Lambda
  CasesEnrichLambda:
    Condition: IsDataCollectionSetup
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.11
      ReservedConcurrentExecutions: 10
      Timeout: 900
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from datetime import datetime, timezone, timedelta

          def lambda_handler(event, context):

            # Build support client to assume role in target account
            account_id = event['account']
            region = event['region']
            session_name = 'CasesEnrichLambda'
            AssumeRoleName = os.environ['AssumeRoleName']
            RoleArn = f"arn:aws:iam::{account_id}:role/{AssumeRoleName}"
            assumed_role = boto3.client('sts').assume_role(RoleArn=RoleArn, RoleSessionName=session_name)
            assumed_credentials = assumed_role['Credentials']

            # Create separate clients for Health and EventBridge using the assumed credentials
            support_client = boto3.client('support', region_name='us-east-1',
                                        aws_access_key_id=assumed_credentials['AccessKeyId'],
                                        aws_secret_access_key=assumed_credentials['SecretAccessKey'],
                                        aws_session_token=assumed_credentials['SessionToken'])
            eventbridge_client = boto3.client('events',region_name=region,
                                        aws_access_key_id=assumed_credentials['AccessKeyId'],
                                        aws_secret_access_key=assumed_credentials['SecretAccessKey'],
                                        aws_session_token=assumed_credentials['SessionToken'])

            #Decide if its a backfill or event Call
            if event['source'] == 'aws.cloudformation':
                backfill_event(event,support_client,eventbridge_client)
            else:
                enrich_event(event,support_client,eventbridge_client)    
            return {'statusCode': 200, 'body': 'Success'}

          def enrich_event(event,support_client,eventbridge_client):
            case_id = event['detail']['case-id']
            case_response = support_client.describe_cases(caseIdList=[case_id],includeResolvedCases=True,includeCommunications=False)
            case = case_response['cases'][0]
            submittedRole, LastCommunicationTime = describe_all_case_communications(case_id,support_client,eventbridge_client)
            case['submittedRole'] = submittedRole
            case['LastCommunicationTime'] = LastCommunicationTime
            print(case)
            publish_event(case,eventbridge_client)
            return {'statusCode': 200, 'body': 'Success'}
            
          def backfill_event(event,support_client,eventbridge_client):
            startTime = datetime.now() - timedelta(days=90)
            paginator = support_client.get_paginator("describe_cases")
            for page in paginator.paginate(afterTime= startTime.isoformat(),includeResolvedCases=True,includeCommunications=False):
                cases = page["cases"]
                for case in cases:
                  case_id = case['caseId']
                  submittedRole, LastCommunicationTime = describe_all_case_communications(case_id,support_client,eventbridge_client)
                  case['submittedRole'] = submittedRole
                  case['LastCommunicationTime'] = LastCommunicationTime
                  print(case)
                  publish_event(case,eventbridge_client)
            return {'statusCode': 200, 'body': 'Success'}

          def describe_all_case_communications(case_id,support_client,eventbridge_client):
            communications = []
            paginator = support_client.get_paginator("describe_communications")
            for page in paginator.paginate(caseId=case_id):
                communications += page["communications"]
            submittedRole = (communications[-1]['submittedBy'])
            LastCommunicationTime = communications[0]['timeCreated']
            return submittedRole,LastCommunicationTime

          def publish_event(case,eventbridge_client):
            eventbridge_client.put_events(
                Entries=[
                    {
                        'Source': 'heidi.support',
                        'DetailType': 'heidi.support',
                        'Detail': json.dumps(case),
                        'EventBusName': 'default'
                    }
                ]
            )
      Role: !GetAtt CasesEnrichLambdaRole.Arn
      Environment:
        Variables:
          AssumeRoleName: !Sub "${ResourcePrefix}${ModuleName}-${MultiAccountRoleName}"

  CasesEnrichLambdaPermissions:
    Condition: IsDataCollectionSetup
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CasesEnrichLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventToTriggerEnrichLambda.Arn

  CasesBackfillLambdaPermissions:
    Condition: IsDataCollectionSetup
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CasesEnrichLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventToTriggerBackfillLambda.Arn

# Backfill Lambda Event Rule
  EventToTriggerBackfillLambda:
    Condition: IsDataCollectionSetup
    Type: "AWS::Events::Rule"
    Properties:
      Description: "EventBridge default rule to trigger backfill Lambda"
      EventBusName: !Sub ${ResourcePrefix}DataCollectionBus-${DataCollectionAccountID}
      EventPattern:
        source:
          - "aws.cloudformation"
        detail:
          logical-resource-id:
            - DefaultBusRuleCases
          status-details:
            status:
              - CREATE_COMPLETE
      Targets:
        - Arn: !GetAtt CasesEnrichLambda.Arn
          Id: EventToTriggerBackfillLambda

# Enrich Lambda Events Rule
  EventToTriggerEnrichLambda:
    Condition: IsDataCollectionSetup
    Type: "AWS::Events::Rule"
    Properties:
      Description: "EventBridge default rule to trigger backfill Lambda"
      EventBusName: !Sub ${ResourcePrefix}DataCollectionBus-${DataCollectionAccountID}
      EventPattern:
        source:
          - "aws.support"
      Targets:
        - Arn: !GetAtt CasesEnrichLambda.Arn
          Id: EventToTriggerBackfillLambda

